import InvalidParametersError, { BOARD_POSITION_NOT_VALID_MESSAGE, GAME_FULL_MESSAGE, GAME_NOT_IN_PROGRESS_MESSAGE, GAME_NOT_STARTABLE_MESSAGE, MOVE_NOT_YOUR_TURN_MESSAGE, PLAYER_ALREADY_IN_GAME_MESSAGE, PLAYER_NOT_IN_GAME_MESSAGE, } from '../../lib/InvalidParametersError';
import Game from './Game';
function getOtherPlayerColor(color) {
    if (color === 'Yellow') {
        return 'Red';
    }
    return 'Yellow';
}
export default class ConnectFourGame extends Game {
    _preferredRed;
    _preferredYellow;
    constructor(priorGame) {
        super({
            moves: [],
            status: 'WAITING_FOR_PLAYERS',
            firstPlayer: getOtherPlayerColor(priorGame?.state.firstPlayer || 'Yellow'),
        });
        this._preferredRed = priorGame?.state.red;
        this._preferredYellow = priorGame?.state.yellow;
    }
    startGame(player) {
        if (this.state.status !== 'WAITING_TO_START') {
            throw new InvalidParametersError(GAME_NOT_STARTABLE_MESSAGE);
        }
        if (this.state.red !== player.id && this.state.yellow !== player.id) {
            throw new InvalidParametersError(PLAYER_NOT_IN_GAME_MESSAGE);
        }
        if (this.state.red === player.id) {
            this.state.redReady = true;
        }
        if (this.state.yellow === player.id) {
            this.state.yellowReady = true;
        }
        if (!(this._preferredRed === this.state.red || this._preferredYellow === this.state.yellow)) {
            this.state.firstPlayer = 'Red';
        }
        this.state = {
            ...this.state,
            status: this.state.redReady && this.state.yellowReady ? 'IN_PROGRESS' : 'WAITING_TO_START',
        };
    }
    _join(player) {
        if (this.state.yellow === player.id || this.state.red === player.id) {
            throw new InvalidParametersError(PLAYER_ALREADY_IN_GAME_MESSAGE);
        }
        if (this._preferredRed === player.id && !this.state.red) {
            this.state = {
                ...this.state,
                status: 'WAITING_FOR_PLAYERS',
                red: player.id,
            };
        }
        else if (this._preferredYellow === player.id && !this.state.yellow) {
            this.state = {
                ...this.state,
                status: 'WAITING_FOR_PLAYERS',
                yellow: player.id,
            };
        }
        else if (!this.state.red) {
            this.state = {
                ...this.state,
                status: 'WAITING_FOR_PLAYERS',
                red: player.id,
            };
        }
        else if (!this.state.yellow) {
            this.state = {
                ...this.state,
                status: 'WAITING_FOR_PLAYERS',
                yellow: player.id,
            };
        }
        else {
            throw new InvalidParametersError(GAME_FULL_MESSAGE);
        }
        if (this.state.red && this.state.yellow) {
            this.state.status = 'WAITING_TO_START';
        }
    }
    _leave(player) {
        if (this.state.status === 'OVER') {
            return;
        }
        const removePlayer = (playerID) => {
            if (this.state.red === playerID) {
                this.state = {
                    ...this.state,
                    red: undefined,
                    redReady: false,
                };
                return 'Red';
            }
            if (this.state.yellow === playerID) {
                this.state = {
                    ...this.state,
                    yellow: undefined,
                    yellowReady: false,
                };
                return 'Yellow';
            }
            throw new InvalidParametersError(PLAYER_NOT_IN_GAME_MESSAGE);
        };
        const color = removePlayer(player.id);
        switch (this.state.status) {
            case 'WAITING_TO_START':
            case 'WAITING_FOR_PLAYERS':
                this.state.status = 'WAITING_FOR_PLAYERS';
                break;
            case 'IN_PROGRESS':
                this.state = {
                    ...this.state,
                    status: 'OVER',
                    winner: color === 'Red' ? this.state.yellow : this.state.red,
                };
                break;
            default:
                throw new Error(`Unexpected game status: ${this.state.status}`);
        }
    }
    _validateMove(move) {
        let nextPlayer;
        if (this.state.firstPlayer === 'Red') {
            nextPlayer = this.state.moves.length % 2 === 0 ? 'Red' : 'Yellow';
        }
        else {
            nextPlayer = this.state.moves.length % 2 === 0 ? 'Yellow' : 'Red';
        }
        if (move.gamePiece !== nextPlayer) {
            throw new InvalidParametersError(MOVE_NOT_YOUR_TURN_MESSAGE);
        }
        const numMovesInCol = this.state.moves.filter(m => m.col === move.col).length;
        if (numMovesInCol === 6) {
            throw new InvalidParametersError(BOARD_POSITION_NOT_VALID_MESSAGE);
        }
        if (move.row !== 5 - numMovesInCol) {
            throw new InvalidParametersError(BOARD_POSITION_NOT_VALID_MESSAGE);
        }
    }
    _applyMove(move) {
        const checkForTie = (moves) => moves.length === 42;
        const checkForWin = (moves) => {
            const board = new Array(6);
            for (let i = 0; i < board.length; i += 1) {
                board[i] = new Array(7).fill(undefined);
            }
            for (const eachMove of moves) {
                board[eachMove.row][eachMove.col] = eachMove.gamePiece;
            }
            for (let row = 0; row < board.length; row += 1) {
                let numInARow = 1;
                for (let col = 1; col < board[row].length; col += 1) {
                    if (board[row][col] && board[row][col] === board[row][col - 1]) {
                        numInARow += 1;
                    }
                    else {
                        numInARow = 1;
                    }
                    if (numInARow === 4) {
                        return true;
                    }
                }
            }
            for (let col = 0; col < board[0].length; col += 1) {
                let numInARow = 1;
                for (let row = 1; row < board.length; row += 1) {
                    if (board[row][col] && board[row][col] === board[row - 1][col]) {
                        numInARow += 1;
                    }
                    else {
                        numInARow = 1;
                    }
                    if (numInARow === 4) {
                        return true;
                    }
                }
            }
            for (let row = 0; row < board.length; row += 1) {
                for (let col = 0; col < board[row].length; col += 1) {
                    if (row + 3 < board.length &&
                        col + 3 < board[row].length &&
                        board[row][col] &&
                        board[row][col] === board[row + 1][col + 1] &&
                        board[row][col] === board[row + 2][col + 2] &&
                        board[row][col] === board[row + 3][col + 3]) {
                        return true;
                    }
                }
            }
            for (let row = 0; row < board.length; row += 1) {
                for (let col = 0; col < board[row].length; col += 1) {
                    if (row + 3 < board.length &&
                        col - 3 >= 0 &&
                        board[row][col] &&
                        board[row][col] === board[row + 1][col - 1] &&
                        board[row][col] === board[row + 2][col - 2] &&
                        board[row][col] === board[row + 3][col - 3]) {
                        return true;
                    }
                }
            }
            return false;
        };
        const newMoves = [...this.state.moves, move];
        const newState = {
            ...this.state,
            moves: newMoves,
        };
        if (checkForWin(newMoves)) {
            newState.status = 'OVER';
            newState.winner = move.gamePiece === 'Red' ? this.state.red : this.state.yellow;
        }
        else if (checkForTie(newMoves)) {
            newState.winner = undefined;
            newState.status = 'OVER';
        }
        this.state = newState;
    }
    applyMove(move) {
        if (this.state.status !== 'IN_PROGRESS') {
            throw new InvalidParametersError(GAME_NOT_IN_PROGRESS_MESSAGE);
        }
        let gamePiece;
        if (move.playerID === this.state.red) {
            gamePiece = 'Red';
        }
        else if (move.playerID === this.state.yellow) {
            gamePiece = 'Yellow';
        }
        else {
            throw new InvalidParametersError(PLAYER_NOT_IN_GAME_MESSAGE);
        }
        const newMove = {
            gamePiece,
            col: move.move.col,
            row: move.move.row,
        };
        this._validateMove(newMove);
        this._applyMove(newMove);
    }
}
//# sourceMappingURL=data:application/json;base64,